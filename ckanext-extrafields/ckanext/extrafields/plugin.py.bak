import ckan.plugins as plugins
import ckan.plugins.toolkit as toolkit

class ExampleIDatasetFormPlugin(plugins.SingletonPlugin, toolkit.DefaultDatasetForm):
    plugins.implements(plugins.IDatasetForm)
    plugins.implements(plugins.IConfigurer)
    plugins.implements(plugins.ITemplateHelpers)

    ##def create_package_schema(self):
        # let's grab the default schema in our plugin
       ## schema = super(ExampleIDatasetFormPlugin, self).create_package_schema()
                        #our custom field
        ##schema.update({
          ##  'custom_text': [toolkit.get_validator('ignore_missing'),
         ##                   toolkit.get_converter('convert_to_extras')]
       ## })
        ##return schema
    ##def update_package_schema(self):
        ##schema = super(ExampleIDatasetFormPlugin, self).update_package_schema()
                    #our custom field
        ##schema.update({
          ##  'custom_text': [toolkit.get_validator('ignore_missing'),
##                            toolkit.get_converter('convert_to_extras')]
        ##})
        ##return schema
    def _modify_package_schema(self, schema):
        schema.update({
            'custom_text': [toolkit.get_validator('ignore_missing'),
                            toolkit.get_converter('convert_to_extras')]
        })
        schema.update({
            'country_code': [
                toolkit.get_validator('ignore_missing'),
                toolkit.get_converter('convert_to_tags')('country_codes')
            ]
        })
        return schema

    def create_package_schema(self):
        schema = super(ExampleIDatasetFormPlugin, self).create_package_schema()
        schema = self._modify_package_schema(schema)
        return schema

    def update_package_schema(self):
        schema = super(ExampleIDatasetFormPlugin, self).update_package_schema()
        schema = self._modify_package_schema(schema)
        return schema

    def show_package_schema(self):
        schema = super(ExampleIDatasetFormPlugin, self).show_package_schema()
        schema.update({
            'custom_text': [toolkit.get_converter('convert_from_extras'),
                            toolkit.get_validator('ignore_missing')]
        })
        schema['tags']['__extras'].append(toolkit.get_converter('free_tags_only'))
        schema.update({
            'country_code': [
                toolkit.get_converter('convert_from_tags')('country_codes'),
                toolkit.get_validator('ignore_missing')]
            })
        return schema

    def is_fallback(self):
            # Return True to register this plugin as the default handler for
                    # package types not handled by any other IDatasetForm plugin.
        return True

    def package_types(self):
                                        # This plugin doesn't handle any special package types, it just
                                                # registers itself as the default (above).
        return []
    def update_config(self, config):
          # Add this plugin's templates dir to CKAN's extra_template_paths, so
                  # that CKAN will use this plugin's custom templates.
        toolkit.add_template_directory(config, 'templates')

    def create_country_codes():
        user = toolkit.get_action('get_site_user')({'ignore_auth': True}, {})
        context = {'user': user['name']}
        try:
            data = {'id': 'country_codes'}
            toolkit.get_action('vocabulary_show')(context, data)
        except toolkit.ObjectNotFound:
            data = {'name': 'country_codes'}
            vocab = toolkit.get_action('vocabulary_create')(context, data)
            for tag in (u'uk', u'ie', u'de', u'fr', u'es'):
                data = {'name': tag, 'vocabulary_id': vocab['id']}
                toolkit.get_action('tag_create')(context, data)

    def country_codes():
        create_country_codes()
        try:
            tag_list = toolkit.get_action('tag_list')
            country_codes = tag_list(data_dict={'vocabulary_id': 'country_codes'})
            return country_codes
        except toolkit.ObjectNotFound:
            return None

    def get_helpers(self):
        return {'country_codes': country_codes}

class ExtrafieldsPlugin(plugins.SingletonPlugin):
    plugins.implements(plugins.IConfigurer)

    # IConfigurer

    def update_config(self, config_):
        toolkit.add_template_directory(config_, 'templates')
        toolkit.add_public_directory(config_, 'public')
        toolkit.add_resource('fanstatic', 'extrafields')
